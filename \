#include <stdio.h>
#include <memory>
#include "Camera.h"
#include "ScalarField.h"
#include "Image.h"
//#include "Sphere.h"
#include "Shapes.h"
#include "Construction.h"
//#include "Icosahedron.h"
#include "Transforms.h"
#include "OpenImageIO/imageio.h"
#include "Mask.h"

bool writeImage(const char* filename, lux::Image image){
	//const char* filename = "test.exr";
	const int xres = image.Width();
	const int yres = image.Height();
	const int channels = 4;
	std::vector<float> imageData = image.getdata1d();
	std::cout << "Image 1D Array Prepped\n";

	std::unique_ptr<OIIO::ImageOutput> out = OIIO::ImageOutput::create (filename);
	OIIO::ImageSpec spec(xres, yres, channels, OIIO::TypeDesc::FLOAT);

	spec.channelformats.push_back(OIIO::TypeDesc::FLOAT);
	spec.channelformats.push_back(OIIO::TypeDesc::FLOAT);
	spec.channelformats.push_back(OIIO::TypeDesc::FLOAT);
	spec.channelformats.push_back(OIIO::TypeDesc::FLOAT);

	spec.channelnames.clear();
	spec.channelnames.push_back("R");
	spec.channelnames.push_back("G");
	spec.channelnames.push_back("B");
	spec.channelnames.push_back("A");
	
	if (out){
		out->open(filename, spec);
		std::cout << "File Opened\n";
		out->write_image(OIIO::TypeDesc::FLOAT, (void*)&imageData[0]);
		out->close();
		return true;
	}
	return false;
}

int main(){
	//Setup camera
	Camera camera = Camera();
	camera.setEyeViewUp(
		lux::Vector(0, 0, -20),
		lux::Vector(0, 0, 1),
		lux::Vector(0, 1, 0));
	camera.setNearPlane(0.0);
	camera.setFarPlane(100.0);
	//Add objects to scene
	
	float radius = 2.0;
	Sphere sphere = Sphere(radius);
	cout << "Test Eval: " << sphere.eval(lux::Vector(1, 1, 1)) << endl;

	//Create mask of objects
	Mask mask = Mask(&sphere);
	cout << "Mask Eval: " << mask.eval(lux::Vector(1, 1, 1)) << endl; 
	//Create a color field for objects
	ColorField color = ColorField(lux::Color(1, 1, 1, 1), &mask);
	//Create a density field for objects
	DensityField density = DensityField(1);
	//Render objects emmissively
	//lux::Image image = camera.render(500, 0.1, mask, color, density);	
	//writeImage("Sphere.exr", image);

	
	Icosahedron ico = Icosahedron();
	mask = Mask(&ico);
	color = ColorField(lux::Color(1, 0, 1, 1), &mask);
	//writeImage("Ellipse.exr", image);

	Torus body = Torus(3, 1, lux::Vector(0, 0, 1));
	SteinerPatch heart = SteinerPatch();
	Scale biggerHeart = Scale(&heart, 10);
	Icosahedron intestines = Icosahedron();
	Intersection innerbits = Intersection(&biggerHeart, &intestines);


	Box head = Box(lux::Vector(0, 0, 0), 40, 3);
	Sphere l_eye = Sphere(0.5);
	Translation l_eyeTrans = Translation(&l_eye, lux::Vector(1.5, -1.5, -3));
	Sphere r_eye = Sphere(0.5);
	Translation r_eyeTrans = Translation(&r_eye, lux::Vector(-1.5, -1.5, -3));
	Ellipse nose = Ellipse(2, 0.5, lux::Vector(0, 0, 1));
	Translation noseTrans = Translation(&nose, lux::Vector(0, 0, -5.5));

	Union eyes = Union(&l_eyeTrans, &r_eyeTrans);
	Union face = Union(&eyes, &noseTrans);
	Union headWithFace = Union(&head, &face);

	Icosahedron hairBase = Icosahedron();
	Plane hairPlane = Plane(lux::Vector(0, -1, 0), lux::Vector(0, 1, 0));
	Cutout hairIco = Cutout(&hairBase, &hairPlane);
	Sphere hairSphere = Sphere(2);
	Cutout hair = Cutout(&hairIco, &hairSphere);
	Shell hairShell = Shell(&hair, 2);

	Ellipse l_arm = Ellipse(2, 2, lux::Vector(0, 1, 0));
	Ellipse r_arm = Ellipse(2, 2, lux::Vector(0, 1, 0));


	mask = Mask(&headWithFace);
	color = ColorField(lux::Color(1, 0, 1, 1), &mask);

	for(int i = 10; i < 121; i++){
		float interp = (float)i/(2.0 * M_PI);
		lux::Vector newEyePos = lux::Vector(sin(interp)*20, 3, cos(interp)*20);
		lux::Vector newView = lux::Vector(0, 0, 0) - newEyePos;
		lux::Vector newUp = lux::Vector(0, 1, 0);
		camera.setEyeViewUp(
				newEyePos,
				newView,
				newUp);
		lux::Image image = camera.render(500, 0.1, &mask, &color, density);
		std::string str = "ICO_" + std::to_string(i) + ".exr";
		const char* filename = str.c_str();
		writeImage(filename, image);
	}

	printf("Ran successfully\n");
	return 0;
}
